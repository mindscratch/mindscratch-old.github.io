<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Craig Wickesser]]></title>
  <link href="http://mindscratch.github.io/atom.xml" rel="self"/>
  <link href="http://mindscratch.github.io/"/>
  <updated>2014-01-21T13:56:16-05:00</updated>
  <id>http://mindscratch.github.io/</id>
  <author>
    <name><![CDATA[Craig Wickesser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Clojure]]></title>
    <link href="http://mindscratch.github.io/blog/2014/01/09/learning-clojure/"/>
    <updated>2014-01-09T18:34:00-05:00</updated>
    <id>http://mindscratch.github.io/blog/2014/01/09/learning-clojure</id>
    <content type="html"><![CDATA[<h2>Go?</h2>

<p>Sometime in November 2013 I began looking at Go. I started looking at the great documentation and tutorials on the <a href="http://golang.org/">golang</a> site and following all sorts of blogs.</p>

<p>I still think Go is interesting and want to really do something with it, besides read about it and play a bit. The problem I have is not having a project to work on. I try to come up with ideas but don&rsquo;t get far because I get busy with other things in my life.</p>

<!-- more -->


<h2>Clojure</h2>

<p>Last weekend I began looking at Functional programming again and found some great resources. I briefly looked at Scala in the past but never got into it because I was heavy into Rails and learning the latest JavaScript goodness.</p>

<p>I still wanted to learn more about Functional programming. I wanted to be able to have a conversation and have a better grasp then just &ldquo;prefer immutable data&rdquo; and &ldquo;higher-order functions&rdquo;.</p>

<p>I decided to play with Clojure because it appears to have been growing in popularity, plus it runs on the JVM (heavily used for the projects I work on at my day job).</p>

<p>Now I&rsquo;m going to dump URLs to Clojure resources that are useful or look at it (in the case I haven&rsquo;t dug into them yet):</p>

<ul>
<li><a href="http://alexott.net/en/clojure/video.html">http://alexott.net/en/clojure/video.html</a></li>
<li><a href="http://java.ociweb.com/mark/clojure/article.html">http://java.ociweb.com/mark/clojure/article.html</a></li>
<li><a href="http://learnxinyminutes.com/docs/clojure/">http://learnxinyminutes.com/docs/clojure/</a></li>
<li><a href="http://clojure-doc.org/">http://clojure-doc.org/</a></li>
<li><a href="http://www.learningclojure.com/">http://www.learningclojure.com/</a></li>
<li><a href="http://thecleancoder.blogspot.com/2010/08/why-clojure.html">http://thecleancoder.blogspot.com/2010/08/why-clojure.html</a></li>
<li><a href="http://www.braveclojure.com/">http://www.braveclojure.com/</a></li>
<li><a href="http://learn-clojure.com/get_clojure.html">http://learn-clojure.com/get_clojure.html</a></li>
</ul>


<h2>Next</h2>

<p>I will continue learning about Functional programming and hope to apply some Clojure at work, although I might end having to use Scala since that&rsquo;s already in place for a few projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go: imports with underscores]]></title>
    <link href="http://mindscratch.github.io/blog/2013/12/06/go-imports-with-underscores/"/>
    <updated>2013-12-06T23:10:00-05:00</updated>
    <id>http://mindscratch.github.io/blog/2013/12/06/go-imports-with-underscores</id>
    <content type="html"><![CDATA[<p>One way I&rsquo;m learning Go is to look at open source Go projects. To list a few:</p>

<ul>
<li><a href="https://github.com/russross/blackfriday">blackfriday</a></li>
<li><a href="https://github.com/kelseyhightower/envconfig">envconfig</a></li>
<li><a href="https://github.com/smartystreets/goconvey">GoConvey</a></li>
</ul>


<p>Something I&rsquo;ve seen in a few places are imports that have an underscore  <a href="https://github.com/smartystreets/goconvey/blob/24673de23f07dcdbf0fd5b72c9c24dff5840f7db/goconvey.go#L26">before the name</a> of the package.</p>

<!-- more -->




<script src='https://gist.github.com/7837213.js?file='></script>


<div><noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7837213&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>The <a href="http://golang.org/doc/effective_go.html#blank">blank identifier</a> can be used in a few situations, however, the case I want to focus on in this post is <a href="http://golang.org/doc/effective_go.html#blank_unused">Import for side effect</a>.</p>

<p>Reading the description I saw a reference to a function named <em>init</em>, which was something I hadn&rsquo;t heard of before. Sure enough, the <a href="http://golang.org/doc/effective_go.html#init">init function</a> is real and it&rsquo;s kinda special.</p>

<p>The function must have the signature <code>func init() { ... }</code>, that&rsquo;s it. Each source file can have 0 or more <code>init</code> functions, the example above shows foo.go with two <code>init</code> functions.</p>

<p>Wny might you want to use an <code>init</code> function?</p>

<blockquote><p>Besides initializations that cannot be expressed as declarations, a common use of init functions is to verify or repair correctness of the program state before real execution begins.
&mdash; <cite><a href="http://golang.org/doc/effective_go.html#init">Effective Go</a></cite></p></blockquote>

<p>Tomorrow, not sure yet.</p>

<p>#Day1</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototyping with a Server in the Browser]]></title>
    <link href="http://mindscratch.github.io/blog/2013/07/12/prototyping-with-a-server-in-the-browser/"/>
    <updated>2013-07-12T22:08:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/07/12/prototyping-with-a-server-in-the-browser</id>
    <content type="html"><![CDATA[<p>Prototyping is often used to &ldquo;quickly&rdquo; implement a new feature or least part of a feature with the hopes of getting feedback to help determine if a <em>real</em> implementation should be provided.</p>

<!--more-->


<p>All to often our customers, managers or leads see the prototype and think, &ldquo;Great, now we can move onto the next feature&rdquo;, completely forgetting what they&rsquo;ve seen is the prototype. Ah, the perils of being a developer.</p>

<p>Sometimes to &ldquo;whip up&rdquo; a prototype I&rsquo;ve hacked together some server and client-side code, dreading it might end up in production. In fact, one of the downsides to hacking together some code for a prototype is having to evolve the hacked in code as users, customers, managers, etc see the prototype and ask you to tweak it here and there.</p>

<p>In a recent two-week sprint, I decided it would be worth trying to implement the UI portion of a new set of features before doing any server-side work. I thought by using a <em>fake</em> server in the browser I could defer having to implement server-side logic and database modeling tasks.</p>

<p>I did a quick search and found a presentation by Pavel Filippov titled <a href="http://emdin.info/r/sinon-talk/#1">Fake API using Sinon.JS
and LocalStorage</a>. Genius! I hadn&rsquo;t thought about the <a href="http://sinonjs.org/docs/#server">FakeServer</a> provided by Sinon.JS until I saw the aforementioned slides.</p>

<p>I present my version of a <em>Server in the Browser</em>:</p>

<script src='https://gist.github.com/5951148.js?file='></script>


<div><noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/5951148&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>Certainly this <em>fake</em> logic in the client could do more complicated work such as actually storing data using client-side <a href="http://www.html5rocks.com/en/features/storage">storage</a>. In any event, I look forward to wrapping up my current sprint at work to see just how well this &lsquo;Server in the Browser&rsquo; goes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command-Query Responsibility Segregation with Event Sourcing Notes]]></title>
    <link href="http://mindscratch.github.io/blog/2013/07/11/command-query-responsibility-segregation-with-event-sourcing-notes/"/>
    <updated>2013-07-11T21:03:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/07/11/command-query-responsibility-segregation-with-event-sourcing-notes</id>
    <content type="html"><![CDATA[<h1>CQRS</h1>

<p>Some brief notes about CQRS (Command-Query Responsibility Segregation) with <a href="http://martinfowler.com/eaaDev/EventSourcing.html">Event Sourcing</a>:</p>

<!--more-->


<ul>
<li>Every state change is materialized in an <em>Event</em></li>
<li>All Events are sent to an <em>EventProcessor</em></li>
<li>EventProcessor stores all events in an <em>Event Log</em></li>
<li>System can be reset and <em>Event Log</em> replayed</li>
<li>No need for ORM, just persist the Events</li>
<li>Many different <em>EventListeners</em> can be added to EventProcessor (or listen directly on the Event log)</li>
</ul>


<p>Some sample apps:</p>

<ul>
<li><a href="https://github.com/cavalle/banksimplistic">https://github.com/cavalle/banksimplistic</a></li>
<li><a href="https://github.com/slashdotdash/rcqrs">https://github.com/slashdotdash/rcqrs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeezus!]]></title>
    <link href="http://mindscratch.github.io/blog/2013/07/09/yeezus-slash/"/>
    <updated>2013-07-09T19:52:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/07/09/yeezus-slash</id>
    <content type="html"><![CDATA[<p>Typical, Hello World. I&rsquo;m planning a reboot of my website and hopefully this is the beginning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make some objects for goodness sake]]></title>
    <link href="http://mindscratch.github.io/blog/2012/06/02/make-some-objects-for-goodness-sake/"/>
    <updated>2012-06-02T21:43:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2012/06/02/make-some-objects-for-goodness-sake</id>
    <content type="html"><![CDATA[<p><em>This post was originally posted on June 2, 2012 on my blog hosted at Blogger, but is being reposted here so the post doesn&rsquo;t get lost since the Blogger blog is no longer being maintained.</em></p>

<hr />

<p>There’s been lots of discussion lately about making Rails more object oriented. I’m not sure what spurred all the recent discussions, but I think it’s great that there are lots of discussions spreading around the community.</p>

<!--more-->


<p>When I first began learning Rails I quickly bumped into those articles talking about fat models and skinny controllers. I quickly followed suite as it seemed to make sense; initially. Then I got to a point where thought, “why not put some of this stuff into plain old ruby objects in the lib directory?”. I began doing that and have continued doing that ever since and I, as many recent Rails developers have written and talked about, think you should too.
Some of the recent libraries, posts or books related to more object oriented Rails include:</p>

<ul>
<li><a href="http://objectsonrails.com/">Objects on Rails</a> by <a href="http://avdi.org/">Avdi Grim</a> &ndash; book</li>
<li><a href="https://github.com/jonleighton/focused_controller">Focused Controller</a> &ndash; ruby gem</li>
<li><a href="http://jamesgolick.com/2012/5/22/objectify-a-better-way-to-build-rails-applications.html">Objectify</a> &ndash; blog post about a gem</li>
<li>I also saw a project on github that was some sort of command pattern implementation, but I can’t recall the name.</li>
</ul>


<p>Prior to all of those, and I’m sure I’m missing some, I heard Jeff Casmir’s <a href="http://en.oreilly.com/rails2011/public/schedule/speaker/5453">talk</a> at RailsConf 2011. He talked about potentially getting away from the dogma of fat models, skinny controllers by suggesting people create more libraries/gems, use the presenter pattern, etc.</p>

<p>In parting I’d just like to say, don’t be afraid of having code outside of app/models and app/controllers. Ruby is object oriented and Rails is a framework that is built with Ruby, so go ahead and use your bad ass OO skills already! Rails provides lots of conventions and opinionated views, but that doesn’t mean you can’t do what makes the most sense for your applications. And please, feel free to use the lib directory or even create some gems that you could potentially reuse.</p>

<p>Hell, get real crazy and build some engines! (I’ve built 3 in the last 2 months).</p>
]]></content>
  </entry>
  
</feed>
