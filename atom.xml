<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Craig Wickesser]]></title>
  <link href="http://mindscratch.github.io/atom.xml" rel="self"/>
  <link href="http://mindscratch.github.io/"/>
  <updated>2013-09-01T20:19:49-04:00</updated>
  <id>http://mindscratch.github.io/</id>
  <author>
    <name><![CDATA[Craig Wickesser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go Resources]]></title>
    <link href="http://mindscratch.github.io/blog/2013/09/01/go-resources/"/>
    <updated>2013-09-01T20:05:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/09/01/go-resources</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been taking a look at <a href="http://golang.org/">Go by Googlers</a>. Go looks like a very interesting language because of its relatively small syntax, fulfilling standard library and <a href="http://godoc.org/">great documentation</a>.</p>

<p>Here&rsquo;s a few links I&rsquo;ve bookmarked recently that I thought I&rsquo;d share for anyone else getting started or perhaps for myself to look back at when I&rsquo;m a Go Guru :)</p>

<h2>Official</h2>

<ul>
<li><a href="http://golang.org/">http://golang.org/</a> &ndash; Go official page</li>
<li><a href="http://godoc.org/">http://godoc.org/</a> &ndash; Go documentation</li>
<li><a href="Go%20at%20Google:%20Language%20Design%20in%20the%20Service%20of%20Software%20Engineering">http://talks.golang.org/2012/splash.article</a></li>
</ul>


<h2>Books</h2>

<ul>
<li><a href="http://www.miek.nl/projects/learninggo/">Learning Go</a> [$]</li>
<li><a href="http://www.golang-book.com/">An Introduction to Programming in Go</a> [free]</li>
<li><a href="http://www.qtrac.eu/gobook.html">Programming in Go</a> [$]</li>
<li><a href="http://manning.com/shaw/">Go in Action</a> [$]</li>
</ul>


<h2>Blog Posts</h2>

<ul>
<li><a href="Ferret:%20A%20Resourceful%20Substring%20Search%20Engine%20in%20Go">http://www.tamber.com/posts/ferret.html</a></li>
<li><a href="Recycling%20memory%20buffers%20in%20Go">http://blog.cloudflare.com/recycling-memory-buffers-in-go</a></li>
<li><a href="Go%20After%202%20Years%20in%20Production">http://blog.iron.io/2013/08/go-after-2-years-in-production.html</a></li>
<li><a href="Two%20recent%20Go%20talks">http://blog.golang.org/two-recent-go-talks</a> (from Jan. 2013, pretty good)</li>
<li><a href="How%20We%20Went%20from%2030%20Servers%20to%202:%20Go">http://blog.iron.io/2013/03/how-we-went-from-30-servers-to-2-go.html</a></li>
<li><a href="What's%20Going%20On">http://jmoiron.net/blog/whats-going-on/</a></li>
</ul>


<h2>Libraries/Tools/Gists</h2>

<ul>
<li><a href="Sarama">https://github.com/Shopify/sarama</a> &ndash; <a href="https://kafka.apache.org/">Kafka</a> client</li>
<li><a href="GoSublime">https://github.com/DisposaBoy/GoSublime</a> &ndash; plugin for <a href="http://www.sublimetext.com/">SublimeText</a></li>
<li><a href="Using%20Go%20for%20embarrassingly%20parallel%20scripts">https://gist.github.com/jasonroelofs/4170926</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rack API Image]]></title>
    <link href="http://mindscratch.github.io/blog/2013/08/05/rack-api-image/"/>
    <updated>2013-08-05T21:08:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/08/05/rack-api-image</id>
    <content type="html"><![CDATA[<p>A simple diagram taken from the excellent video &ldquo;<a href="https://vimeo.com/user12143456/review/69109140/c72efbd052">Rebuilding a Ruby web server</a>&rdquo; showing the basic <a href="http://rack.github.io/">Rack</a> specification:</p>

<p><img class="center" src="http://mindscratch.github.io/images/rack-api.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Recommendation: Working with Unix Processes]]></title>
    <link href="http://mindscratch.github.io/blog/2013/07/23/book-recommendation-working-with-unix-processes/"/>
    <updated>2013-07-23T20:53:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/07/23/book-recommendation-working-with-unix-processes</id>
    <content type="html"><![CDATA[<p>Yesterday I received my copy of <a href="http://www.jstorimer.com/products/working-with-unix-processes">Working with Unix Processes</a> written by <a href="http://www.jstorimer.com">Jesse Storimer</a>. I&rsquo;d heard about the book months ago, it might have been even longer.</p>

<p>Today I had some to sit by myself and do some reading.<!--more--> Here&rsquo;s are my thoughts:</p>

<ul>
<li>great information: this book contains lots of great information about working with processes, as you might expect. The key here is that Jesse actually delivers, what a delight.</li>
<li>easy to read: something about the font, spacing and use of whitespace on pages was really pleasant</li>
<li>just enough: content, Jesse doesn&rsquo;t bore you with 500 pages of information copied from Linux man pages, instead he hits the key points and provides enough information to really give you a great understanding of what&rsquo;s going on with processes in Unix</li>
</ul>


<p>If you&rsquo;re new to Unix or have years of experience, but still aren&rsquo;t real sure what &ldquo;fork + exec&rdquo; is and why it matters, then this book is for you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototyping with a Server in the Browser]]></title>
    <link href="http://mindscratch.github.io/blog/2013/07/12/prototyping-with-a-server-in-the-browser/"/>
    <updated>2013-07-12T22:08:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/07/12/prototyping-with-a-server-in-the-browser</id>
    <content type="html"><![CDATA[<p>Prototyping is often used to &ldquo;quickly&rdquo; implement a new feature or least part of a feature with the hopes of getting feedback to help determine if a <em>real</em> implementation should be provided.</p>

<!--more-->


<p>All to often our customers, managers or leads see the prototype and think, &ldquo;Great, now we can move onto the next feature&rdquo;, completely forgetting what they&rsquo;ve seen is the prototype. Ah, the perils of being a developer.</p>

<p>Sometimes to &ldquo;whip up&rdquo; a prototype I&rsquo;ve hacked together some server and client-side code, dreading it might end up in production. In fact, one of the downsides to hacking together some code for a prototype is having to evolve the hacked in code as users, customers, managers, etc see the prototype and ask you to tweak it here and there.</p>

<p>In a recent two-week sprint, I decided it would be worth trying to implement the UI portion of a new set of features before doing any server-side work. I thought by using a <em>fake</em> server in the browser I could defer having to implement server-side logic and database modeling tasks.</p>

<p>I did a quick search and found a presentation by Pavel Filippov titled <a href="http://emdin.info/r/sinon-talk/#1">Fake API using Sinon.JS
and LocalStorage</a>. Genius! I hadn&rsquo;t thought about the <a href="http://sinonjs.org/docs/#server">FakeServer</a> provided by Sinon.JS until I saw the aforementioned slides.</p>

<p>I present my version of a <em>Server in the Browser</em>:</p>

<div><script src='https://gist.github.com/5951148.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>Certainly this <em>fake</em> logic in the client could do more complicated work such as actually storing data using client-side <a href="http://www.html5rocks.com/en/features/storage">storage</a>. In any event, I look forward to wrapping up my current sprint at work to see just how well this &lsquo;Server in the Browser&rsquo; goes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command-Query Responsibility Segregation with Event Sourcing Notes]]></title>
    <link href="http://mindscratch.github.io/blog/2013/07/11/command-query-responsibility-segregation-with-event-sourcing-notes/"/>
    <updated>2013-07-11T21:03:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/07/11/command-query-responsibility-segregation-with-event-sourcing-notes</id>
    <content type="html"><![CDATA[<h1>CQRS</h1>

<p>Some brief notes about CQRS (Command-Query Responsibility Segregation) with <a href="http://martinfowler.com/eaaDev/EventSourcing.html">Event Sourcing</a>:</p>

<!--more-->


<ul>
<li>Every state change is materialized in an <em>Event</em></li>
<li>All Events are sent to an <em>EventProcessor</em></li>
<li>EventProcessor stores all events in an <em>Event Log</em></li>
<li>System can be reset and <em>Event Log</em> replayed</li>
<li>No need for ORM, just persist the Events</li>
<li>Many different <em>EventListeners</em> can be added to EventProcessor (or listen directly on the Event log)</li>
</ul>


<p>Some sample apps:</p>

<ul>
<li><a href="https://github.com/cavalle/banksimplistic">https://github.com/cavalle/banksimplistic</a></li>
<li><a href="https://github.com/slashdotdash/rcqrs">https://github.com/slashdotdash/rcqrs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeezus!]]></title>
    <link href="http://mindscratch.github.io/blog/2013/07/09/yeezus-slash/"/>
    <updated>2013-07-09T19:52:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2013/07/09/yeezus-slash</id>
    <content type="html"><![CDATA[<p>Typical, Hello World. I&rsquo;m planning a reboot of my website and hopefully this is the beginning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make some objects for goodness sake]]></title>
    <link href="http://mindscratch.github.io/blog/2012/06/02/make-some-objects-for-goodness-sake/"/>
    <updated>2012-06-02T21:43:00-04:00</updated>
    <id>http://mindscratch.github.io/blog/2012/06/02/make-some-objects-for-goodness-sake</id>
    <content type="html"><![CDATA[<p><em>This post was originally posted on June 2, 2012 on my blog hosted at Blogger, but is being reposted here so the post doesn&rsquo;t get lost since the Blogger blog is no longer being maintained.</em></p>

<hr />

<p>There’s been lots of discussion lately about making Rails more object oriented. I’m not sure what spurred all the recent discussions, but I think it’s great that there are lots of discussions spreading around the community.</p>

<!--more-->


<p>When I first began learning Rails I quickly bumped into those articles talking about fat models and skinny controllers. I quickly followed suite as it seemed to make sense; initially. Then I got to a point where thought, “why not put some of this stuff into plain old ruby objects in the lib directory?”. I began doing that and have continued doing that ever since and I, as many recent Rails developers have written and talked about, think you should too.
Some of the recent libraries, posts or books related to more object oriented Rails include:</p>

<ul>
<li><a href="http://objectsonrails.com/">Objects on Rails</a> by <a href="http://avdi.org/">Avdi Grim</a> &ndash; book</li>
<li><a href="https://github.com/jonleighton/focused_controller">Focused Controller</a> &ndash; ruby gem</li>
<li><a href="http://jamesgolick.com/2012/5/22/objectify-a-better-way-to-build-rails-applications.html">Objectify</a> &ndash; blog post about a gem</li>
<li>I also saw a project on github that was some sort of command pattern implementation, but I can’t recall the name.</li>
</ul>


<p>Prior to all of those, and I’m sure I’m missing some, I heard Jeff Casmir’s <a href="http://en.oreilly.com/rails2011/public/schedule/speaker/5453">talk</a> at RailsConf 2011. He talked about potentially getting away from the dogma of fat models, skinny controllers by suggesting people create more libraries/gems, use the presenter pattern, etc.</p>

<p>In parting I’d just like to say, don’t be afraid of having code outside of app/models and app/controllers. Ruby is object oriented and Rails is a framework that is built with Ruby, so go ahead and use your bad ass OO skills already! Rails provides lots of conventions and opinionated views, but that doesn’t mean you can’t do what makes the most sense for your applications. And please, feel free to use the lib directory or even create some gems that you could potentially reuse.</p>

<p>Hell, get real crazy and build some engines! (I’ve built 3 in the last 2 months).</p>
]]></content>
  </entry>
  
</feed>
